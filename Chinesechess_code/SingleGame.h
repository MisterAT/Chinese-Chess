#ifndef SINGLEGAME_H
#define SINGLEGAME_H

#include "Board.h"

class SingleGame : public Board
{
    Q_OBJECT
public:
    explicit SingleGame(int l,QWidget *parent = 0);
    ~SingleGame();
    //子力位置表
    int xyscore[7][10][9]={                      //  enum TYPE{CHE, MA, PAO, BING, JIANG, SHI, XIANG};
        {
            {206,208,207,213,214,213,207,208,206},
            {206,212,209,216,233,216,209,212,206},
            {206,208,207,214,216,214,207,208,206},
            {206,213,213,216,216,216,213,213,206},
            {208,211,211,214,215,214,211,211,208},
            {208,212,212,214,215,214,212,212,208},
            {204,209,204,212,214,212,204,209,204},
            {198,208,204,212,212,212,204,208,198},
            {200,208,206,212,200,212,206,208,200},
            {194,206,204,212,200,212,204,206,194}
        },
        {
            {90, 90, 90, 96, 90, 96, 90, 90, 90},
            {90, 96,103, 97, 94, 97,103, 96, 90},
            {92, 98, 99,103, 99,103, 99, 98, 92},
            {93,108,100,107,100,107,100,108, 93},
            {90,100, 99,103,104,103, 99,100, 90},
            {90, 98,101,102,103,102,101, 98, 90},
            {92, 94, 98, 95, 98, 95, 98, 94, 92},
            {93, 92, 94, 95, 92, 95, 94, 92, 93},
            {85, 90, 92, 93, 78, 93, 92, 90, 85},
            {88, 85, 90, 88, 90, 88, 90, 85, 88}
        },
        {
            {100,100, 96, 91, 90, 91, 96,100,100},
            {98, 98, 96, 92, 89, 92, 96, 98, 98},
            {97, 97, 96, 91, 92, 91, 96, 97, 97},
            {96, 99, 99, 98,100, 98, 99, 99, 96},
            {96, 96, 96, 96,100, 96, 96, 96, 96},
            {96, 96, 96, 96, 96, 96, 96, 96, 96},
            {97, 96,100, 99,101, 99,100, 96, 97},
            {96, 97, 98, 98, 98, 98, 98, 97, 96},
            {96, 96, 97, 99, 99, 99, 97, 96, 96}
        },
        {
            { 9,  9,  9, 11, 13, 11,  9,  9,  9},
            {19, 24, 34, 42, 44, 42, 34, 24, 19},
            {19, 24, 32, 37, 37, 37, 32, 24, 19},
            {19, 23, 27, 29, 30, 29, 27, 23, 19},
            {14, 18, 20, 27, 29, 27, 20, 18, 14},
            { 7,  0, 13,  0, 16,  0, 13,  0,  7},
            { 7,  0,  7,  0, 15,  0,  7,  0,  7},
            { 0,  0,  0,  0,  0,  0,  0,  0,  0},
            { 0,  0,  0,  0,  0,  0,  0,  0,  0},
            { 0,  0,  0,  0,  0,  0,  0,  0,  0}
        },
        {
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,1,1,1,0,0,0},
            {0,0,0,2,2,2,0,0,0},
            {0,0,0,11,15,11,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,20,0,20,0,0,0},
            {0,0,0,0,23,0,0,0,0},
            {0,0,0,20,0,20,0,0,0}
        },
        {
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0},
            {0,0,20,0,0,0,20,0,0},
            {0,0,0,0,0,0,0,0,0},
            {18,0,0,0,23,0,0,0,18},
            {0,0,0,0,0,0,0,0,0},
            {0,0,20,0,0,0,20,0,0}
        }
    };
    int _level;
    //int ss[7]={2000, 998, 1002, 400, 30000, 200, 200};
    //int ss[7]={1000, 499, 501, 200, 15000, 100, 100};
    //int ss[7]={0,0,0,0,0,0,0};
    //int ss[7]={600,270,285,30,10000,120,120};
    int MAgo[8][2]={{-1,-2},{1,-2},{-2,-1},{2,-1},{-2,1},{2,1},{-1,2},{1,2}};
    int RBINGgo[3][2]={{0,-1},{0,1},{-1,0}};
    int BBINGgo[3][2]={{0,-1},{0,1},{1,0}};
    int BXIANGgo[7][2]={{0,2},{0,6},{2,0},{2,4},{2,8},{4,2},{4,6}};
    int RXIANGgo[7][2]={{5,2},{5,6},{7,0},{7,4},{7,8},{9,2},{9,6}};
    int JIANGgo[4][2]={{0,-1},{0,1},{1,0},{-1,0}};
    void back();
    void click(int id, int row, int col);

    Step* MaxMove();
    int Minmove(int level, int curMin,int now);
    int Maxmove(int level, int curMax,int now);
    int score();
    int Rchange(Step* step);
    int Bchange(Step* step);
    void fakeMove(Step* step);
    void unfakeMove(Step* step);

    void getAllPossibleMove(QVector<Step*>& steps);
    void getCHEALLPossibleMove(int id, QVector<Step*>& steps);
    void getMAALLPossibleMove(int id, QVector<Step*>& steps);
    void getPAOALLPossibleMove(int id, QVector<Step*>& steps);
    void getSHIALLPossibleMove(int id, QVector<Step*>& steps);
    void getBINGALLPossibleMove(int id, QVector<Step*>& steps);
    void getJIANGALLPossibleMove(int id, QVector<Step*>& steps);
    void getXIANGALLPossibleMove(int id, QVector<Step*>& steps);

signals:

public slots:
    void computerMove();
};

#endif // SINGLEGAME_H
